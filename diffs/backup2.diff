commit 592f065b71bde1e88ace47827cbc6a94f05c7386
Author: Ryan Hope <rmh3093@gmail.com>
Date:   Sat Nov 21 21:57:58 2009 -0500

    smarter reconnecting but clearTimeout does not work

diff --git a/app/models/server.js b/app/models/server.js
index 2320543..2df3064 100644
--- a/app/models/server.js
+++ b/app/models/server.js
@@ -1,8 +1,9 @@
 function ircServer(params)
 {
-	this.STATE_SERVICE_UNAVAILABLE	= -3;
-	this.STATE_PIFACE_UNAVAILABLE	= -2;
-	this.STATE_MAX_RETRIES			= -1;
+	this.STATE_SERVICE_UNAVAILABLE	= -4;
+	this.STATE_PIFACE_UNAVAILABLE	= -3;
+	this.STATE_MAX_RETRIES			= -2;
+	this.STATE_NEEDS_RECONNECT		= -1;
 	this.STATE_DISCONNECTED			= 0;
 	this.STATE_TOKEN_REQUEST		= 1 
 	this.STATE_CONNECTING			= 2; 
@@ -37,8 +38,8 @@ function ircServer(params)
 
 	this.reconnect =			true;
 	this.autoReconnect =		false;
-	this.timerId =				false;
-	this.dcThreshold =			5000;
+	this.disconnectTimout =		false;
+	this.dcThreshold =			20000;
 	this.ipAddress =			false;
 	this.reconnectOnBetter =	false;
 	
@@ -65,11 +66,11 @@ function ircServer(params)
 	if (this.autoConnect) this.init();
 }
 
-ircServer.prototype.setState = function(state)
+ircServer.prototype.setState = function(state, verbose)
 {
 	if (this.state==-1 && state<this.STATE_CONNECTING)
 		return;
-		
+	
 	var message = '';
 	switch (state)
 	{
@@ -80,11 +81,11 @@ ircServer.prototype.setState = function(state)
 		case this.STATE_DISCONNECTED: message = "Disconnected!"; break;
 		case this.STATE_CONNECTING: message = "Connecting..."; break;
 		case this.STATE_CONNECTED: message = "Connected!"; break;
+		case this.STATE_DISRUPTED: this.disconnectTimout = setTimeout(this.disconnect.bind(this), this.dcThreshold); break;
 	}	
-	this.state = state;
-	if (message.length>0) {
+	if (verbose && message.length>0)
 		this.newMessage('type3', false, message);
-	}
+	this.state = state;
 	if (servers.listAssistant && servers.listAssistant.controller)
 		servers.listAssistant.updateList();		
 }
@@ -101,10 +102,10 @@ ircServer.prototype.initHandler = function(payload)
 	{
 		this.sessionToken = payload.sessionToken;
 		this.setupSubscriptions();
-		this.setState(this.STATE_CONNECTING);
+		this.setState(this.STATE_CONNECTING, true);
 		this.connect();
 	}
-	else this.setState(this.STATE_SERVICE_UNAVAILABLE);
+	else this.setState(this.STATE_SERVICE_UNAVAILABLE, true);
 }
 
 ircServer.prototype.init = function()
@@ -119,7 +120,7 @@ ircServer.prototype.init = function()
 		}
 		if (state == 'disconnected')
 		{
-			this.setState(this.STATE_PIFACE_UNAVAILABLE);
+			this.setState(this.STATE_PIFACE_UNAVAILABLE,true);
 			return;
 		}
 	}
@@ -136,6 +137,11 @@ ircServer.prototype.isDisrupted = function(message)
 	return (this.state === this.STATE_DISRUPTED);
 }
 
+ircServer.prototype.needsReconnect = function(message)
+{
+	return (this.state === this.STATE_NEEDS_RECONNECT);
+}
+
 ircServer.prototype.newCommand = function(message)
 {
 	if (this.isConnected())
@@ -388,16 +394,33 @@ ircServer.prototype.genericHandler = function(payload)
 	// idk what to do here if anything
 }
 
+ircServer.prototype.cancelDisconnectTimeout = function(reason)
+{
+	if (this.disconnectTimeout)
+	{
+		clearTimeout(this.disconnectTimeout);
+		this.disconnectTimeout = null;	
+	}
+}
+
 ircServer.prototype.disconnect = function(reason)
 {
-	this.setState(this.STATE_DISCONNECTING);
-	wIRCd.quit(this.disconnectHandler.bindAsEventListener(this), this.sessionToken, reason);
+	if (this.isDisrupted())
+	{
+		this.setState(this.STATE_NEEDS_RECONNECT, true);
+		wIRCd.quit(false, this.sessionToken, reason);
+	}
+	else
+	{
+		this.setState(this.STATE_DISCONNECTING, true);
+		wIRCd.quit(this.disconnectHandler.bindAsEventListener(this), this.sessionToken, reason);
+	}
 }
 
 ircServer.prototype.disconnectHandler = function(payload)
 {
 	this.cleanupSubscriptions();
-	this.setState(this.STATE_DISCONNECTED);
+	this.setState(this.STATE_DISCONNECTED, true);
 	//this.newMessage('status', false, 'dc handler');
 	/*
 	if (payload.returnValue == 0)
@@ -822,7 +845,8 @@ ircServer.prototype.getListObject = function()
 			break;
 		case this.STATE_MAX_RETRIES:
 			obj.rowStyle = obj.rowStyle + ' warning';
-			break;			
+			break;
+		case this.STATE_NEEDS_RECONNECT:			
 		case this.STATE_DISCONNECTED:
 			obj.rowStyle = obj.rowStyle + ' disconnected';
 			break;
@@ -894,7 +918,7 @@ ircServer.prototype.eventConnectHandler = function(payload)
 {
 	if (payload.event=='MAXRETRIES')
 	{
-		this.setState(this.STATE_MAX_RETRIES);
+		this.setState(this.STATE_MAX_RETRIES, true);
 		return;	
 	}
 
@@ -915,7 +939,7 @@ ircServer.prototype.eventConnectHandler = function(payload)
 		this.sessionNetwork = '';
 	}
 	
-	this.setState(this.STATE_CONNECTED);
+	this.setState(this.STATE_CONNECTED, true);
 
 	this.runOnConnect.bind(this).defer();
 }
@@ -1308,7 +1332,7 @@ ircServer.prototype.errorHandler = function(payload)
 {
 	if (payload.errorCode==-1 && this.state!=this.STATE_SERVICE_UNAVAILABLE)
 	{
-		this.setState(this.STATE_SERVICE_UNAVAILABLE);
+		this.setState(this.STATE_SERVICE_UNAVAILABLE, true);
 		this.cleanupSubscriptions();
 	}
 }
diff --git a/app/models/servers.js b/app/models/servers.js
index a218302..917ffb4 100644
--- a/app/models/servers.js
+++ b/app/models/servers.js
@@ -26,11 +26,16 @@ ircServers.prototype.cmHandler = function(payload)
 		if (!connectionInfo.isInternetConnectionAvailable)
 		{
 			if (this.servers[s].isConnected())
-				this.servers[s].setState(this.servers[s].STATE_DISRUPTED);	
+				this.servers[s].setState(this.servers[s].STATE_DISRUPTED, true);	
 		}
 		else
 		{
 			if (this.servers[s].isDisrupted())
+			{
+				this.servers[s].cancelDisconnectTimeout();
+				this.servers[s].setState(this.servers[s].STATE_CONNECTED, false);
+			}
+			else if (this.servers[s].needsReconnect())
 				this.servers[s].init();
 		}
 	}
